一个对象的内存图逻辑：
    程序运行时，方法区先存储.class相关信息，.class空间里面有对应的属性、方法等信息。执行main方法时，进栈在栈内存中开辟一个main方法的内存空间，
    里面存放的都是main方法中的局部变量。而main方法new出来的东西，会在堆内存中保存这个new出来的对象，对象参照.class空间有成员变量，成员方法。
    而对象里面成员方法保存的是方法区.class里面成员方法的内存地址值。堆内存里面的对象也有自己的内存地址值，将这个对象的内存地址值返回给栈内存
    里面声明为phone的变量存储，当对这个变量做修改操作时，会通过这个内存地址值去堆内存中找到对应的对象进行修改。调用对象里面的方法也是通过
    这个对象的内存地址值找到对应对象的成员方法保存的方法内存地址值去方法区找方法。找到这个方法又会再进栈开辟一个方法空间压在main方法的上面（压栈）。
    等该方法执行完成再出栈，并将这个方法在栈内存中销毁。等main方法中完全执行完后，也会将栈内存中的main方法销毁。

局部变量和成员变量（五个不一样）
    定义的位置不一样【重点】
        局部变量：在方法的内部
        成员变量：在方法的外部，直接写在类当中

    作用范围不一样【重点】
        局部变量：只有方法当中在可以使用，出了方法就不能再用
        成员变量：整个类都可以通用(静态方法只能调用静态成员变量)

    默认值不一样【重点】
        局部变量：没有默认值，如果想要使用，必须手动进行赋值
        成员变量：如果没有赋值，会有默认值，规则和数组一样

    内存的位置不一样（了解）
        局部变量：位于栈内存
        成员变量：位于堆内存

    声明周期不一样（了解）
        局部变量：随着方法进栈而诞生，随着方法出栈而消失
        成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失

面向对象三大特征：封装、继承、多态
    封装性在Java当中的体现：
        方法就是一种封装
        关键字private也是一种封装
        （间接访问private成员变量，就是定义一对Getter/Setter方法，这样就可以在Setter方法做一些逻辑，从而提高安全性）

对于基本类型的boolean,Getter方法一定要写成isXxx()形式，Setter()方法形式不变